//this is the naive approach 
//time complexity is 0(n^3)
#include<iostream>
using namespace std;

int main()
{
    int n;cin>>n;
    int arr[n];
    for(int i=0;i<n;i++)
    {
        cin >> arr[i];
    }
    int maxSum = 0;
    for(int start=0;start<n;start++)
    {
        for(int end=start;end<n;end++)
        {
            int sum = 0;
            for(int k=start;k<=end;k++)
            {
                sum+=arr[k];
            }
            if(sum > maxSum)
            {
                maxSum = sum;
            }
        }
    
    }
    cout << maxSum;
    
    return 0;
}

//the below approach is done using Kadanes algorithm

#include<iostream>
using namespace std;

int main()
{
    int n;
    cin >> n;
    int arr[n];
    for(int i=0;i<n;i++)
    {
        cin >> arr[i];
    }
    
    int current_Sum = 0;
    int max_Sum = 0;
    
    for(int i=0;i<n;i++)
    {
        current_Sum += arr[i];
        if(current_Sum < 0)
        {
            current_Sum = 0;
        }
        if(current_Sum > max_Sum)
        {
            max_Sum = current_Sum;
        }
    }
    
    cout << max_Sum;
    
    return 0;
}

















